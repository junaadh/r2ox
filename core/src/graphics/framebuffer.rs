use core::fmt::{self, Write};

use lazy_static::lazy_static;
use spin::Mutex;
use x86_64::VirtAddr;

const FONT_WIDTH: usize = 8;
// const FONT_HEIGHT: usize = 8;

lazy_static! {
    pub static ref FRAME_WRITER: Mutex<Framebuffer> = {
        let fb = Framebuffer::init();
        fb.render_background();
        Mutex::new(fb)
    };
}

#[derive(Debug)]
pub struct Framebuffer {
    pub address: VirtAddr,
    pub width: u64,
    pub height: u64,
    pub pitch: u64,
    pub bpp: u16,
    pub background: u32, // default
}

impl Framebuffer {
    pub fn init() -> Self {
        let response = crate::graphics::framebuffer::FBR.get_response();
        response.unwrap().into()
    }

    pub fn render_background(&self) {
        (0..self.height).for_each(|y| {
            (0..self.width).for_each(|x| {
                let index = y as usize * self.pitch as usize / 4 + x as usize;
                unsafe {
                    let ptr = self.address.as_mut_ptr::<u32>().add(index);
                    *ptr = self.background;
                }
            })
        })
    }

    pub fn draw_char(&self, x: usize, y: usize, ch: char, color: u32) {
        let glyph = Self::get_char_bitmap(ch);

        for (row, bits) in glyph.iter().enumerate() {
            for col in 0..FONT_WIDTH {
                if bits & (1 << (7 - col)) != 0 {
                    self.draw_pixel(x + col, y + row, color);
                }
            }
        }
    }

    pub fn draw_pixel(&self, x: usize, y: usize, color: u32) {
        let pixel_offset = y * self.pitch as usize + x * (self.bpp as usize / 8);
        unsafe {
            let pixel_ptr = self.address.as_mut_ptr::<u8>().add(pixel_offset) as *mut u32;
            *pixel_ptr = color;
        }
    }

    pub fn draw_string(&self, x: usize, y: usize, s: &str, color: u32) {
        let mut x_offset = x;
        for ch in s.chars() {
            self.draw_char(x_offset, y, ch, color);
            x_offset += x;
        }
    }

    fn get_char_bitmap(c: char) -> [u8; 8] {
        match c {
            ' ' => [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            '!' => [0x0C, 0x0C, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x00],
            '"' => [0x36, 0x36, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00],
            '#' => [0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00],
            '$' => [0x0C, 0x1F, 0x30, 0x1E, 0x03, 0x3E, 0x0C, 0x00],
            '%' => [0x63, 0x33, 0x18, 0x0C, 0x06, 0x33, 0x31, 0x00],
            '&' => [0x1C, 0x36, 0x1C, 0x1E, 0x33, 0x33, 0x6E, 0x00],
            '\'' => [0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00],
            '(' => [0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00],
            ')' => [0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00],
            '*' => [0x00, 0x36, 0x1C, 0x7F, 0x1C, 0x36, 0x00, 0x00],
            '+' => [0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00],
            ',' => [0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x18, 0x00],
            '-' => [0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00],
            '.' => [0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00],
            '/' => [0x00, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00],
            '0' => [0x1E, 0x33, 0x37, 0x3F, 0x3B, 0x33, 0x1E, 0x00],
            '1' => [0x0C, 0x1C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
            '2' => [0x1E, 0x33, 0x03, 0x0E, 0x1C, 0x30, 0x3F, 0x00],
            '3' => [0x1E, 0x33, 0x03, 0x0E, 0x03, 0x33, 0x1E, 0x00],
            '4' => [0x06, 0x0E, 0x1E, 0x36, 0x3F, 0x06, 0x06, 0x00],
            '5' => [0x3F, 0x30, 0x3E, 0x03, 0x03, 0x33, 0x1E, 0x00],
            '6' => [0x0E, 0x18, 0x30, 0x3E, 0x33, 0x33, 0x1E, 0x00],
            '7' => [0x3F, 0x33, 0x03, 0x06, 0x0C, 0x0C, 0x0C, 0x00],
            '8' => [0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00],
            '9' => [0x1E, 0x33, 0x33, 0x1F, 0x03, 0x06, 0x1C, 0x00],
            ':' => [0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00],
            ';' => [0x00, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x18, 0x00],
            '<' => [0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00],
            '=' => [0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00],
            '>' => [0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x00],
            '?' => [0x1E, 0x33, 0x03, 0x06, 0x0C, 0x00, 0x0C, 0x00],
            '@' => [0x1E, 0x33, 0x37, 0x37, 0x36, 0x30, 0x1F, 0x00],
            'A' => [0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00],
            'B' => [0x3E, 0x33, 0x33, 0x3E, 0x33, 0x33, 0x3E, 0x00],
            'C' => [0x1E, 0x33, 0x30, 0x30, 0x30, 0x33, 0x1E, 0x00],
            'D' => [0x3E, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3E, 0x00],
            'E' => [0x3F, 0x30, 0x30, 0x3E, 0x30, 0x30, 0x3F, 0x00],
            'F' => [0x3F, 0x30, 0x30, 0x3E, 0x30, 0x30, 0x30, 0x00],
            'G' => [0x1E, 0x33, 0x30, 0x37, 0x33, 0x33, 0x1F, 0x00],
            'H' => [0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00],
            'I' => [0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
            'J' => [0x0F, 0x06, 0x06, 0x06, 0x06, 0x36, 0x1C, 0x00],
            'K' => [0x33, 0x36, 0x3C, 0x38, 0x3C, 0x36, 0x33, 0x00],
            'L' => [0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3F, 0x00],
            'M' => [0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00],
            'N' => [0x33, 0x33, 0x3B, 0x3F, 0x37, 0x33, 0x33, 0x00],
            'O' => [0x1E, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x00],
            'P' => [0x3E, 0x33, 0x33, 0x3E, 0x30, 0x30, 0x30, 0x00],
            'Q' => [0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x07, 0x00],
            'R' => [0x3E, 0x33, 0x33, 0x3E, 0x3C, 0x36, 0x33, 0x00],
            'S' => [0x1F, 0x30, 0x30, 0x1E, 0x03, 0x03, 0x3E, 0x00],
            'T' => [0x3F, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00],
            'U' => [0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x00],
            'V' => [0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00],
            'W' => [0x63, 0x63, 0x6B, 0x7F, 0x7F, 0x77, 0x63, 0x00],
            'X' => [0x33, 0x33, 0x1E, 0x0C, 0x1E, 0x33, 0x33, 0x00],
            'Y' => [0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x0C, 0x00],
            'Z' => [0x3F, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x3F, 0x00],
            '[' => [0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00],
            '\\' => [0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x00],
            ']' => [0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00],
            '^' => [0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00],
            '_' => [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF],
            '`' => [0x0C, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00],
            'a' => [0x00, 0x00, 0x1E, 0x03, 0x1F, 0x33, 0x1F, 0x00],
            'b' => [0x30, 0x30, 0x3E, 0x33, 0x33, 0x33, 0x3E, 0x00],
            'c' => [0x00, 0x00, 0x1E, 0x33, 0x30, 0x33, 0x1E, 0x00],
            'd' => [0x03, 0x03, 0x1F, 0x33, 0x33, 0x33, 0x1F, 0x00],
            'e' => [0x00, 0x00, 0x1E, 0x33, 0x3F, 0x30, 0x1E, 0x00],
            'f' => [0x0E, 0x18, 0x3E, 0x18, 0x18, 0x18, 0x18, 0x00],
            'g' => [0x00, 0x00, 0x1F, 0x33, 0x33, 0x1F, 0x03, 0x1E],
            'h' => [0x30, 0x30, 0x3E, 0x33, 0x33, 0x33, 0x33, 0x00],
            'i' => [0x0C, 0x00, 0x1C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
            'j' => [0x06, 0x00, 0x06, 0x06, 0x06, 0x36, 0x36, 0x1C],
            'k' => [0x30, 0x30, 0x36, 0x3C, 0x38, 0x3C, 0x36, 0x00],
            'l' => [0x1C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00],
            'm' => [0x00, 0x00, 0x36, 0x7F, 0x6B, 0x63, 0x63, 0x00],
            'n' => [0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x33, 0x00],
            'o' => [0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00],
            'p' => [0x00, 0x00, 0x3E, 0x33, 0x33, 0x3E, 0x30, 0x30],
            'q' => [0x00, 0x00, 0x1F, 0x33, 0x33, 0x1F, 0x03, 0x03],
            'r' => [0x00, 0x00, 0x36, 0x3B, 0x30, 0x30, 0x30, 0x00],
            's' => [0x00, 0x00, 0x1F, 0x30, 0x1E, 0x03, 0x3E, 0x00],
            't' => [0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00],
            'u' => [0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x1F, 0x00],
            'v' => [0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00],
            'w' => [0x00, 0x00, 0x63, 0x63, 0x6B, 0x7F, 0x36, 0x00],
            'x' => [0x00, 0x00, 0x33, 0x1E, 0x0C, 0x1E, 0x33, 0x00],
            'y' => [0x00, 0x00, 0x33, 0x33, 0x33, 0x1F, 0x03, 0x1E],
            'z' => [0x00, 0x00, 0x3F, 0x06, 0x0C, 0x18, 0x3F, 0x00],
            '{' => [0x0E, 0x18, 0x18, 0x30, 0x18, 0x18, 0x0E, 0x00],
            '|' => [0x0C, 0x0C, 0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0x00],
            '}' => [0x1C, 0x06, 0x06, 0x03, 0x06, 0x06, 0x1C, 0x00],
            '~' => [0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            _ => [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // default to empty for unsupported characters
        }
    }
}

impl From<limine::framebuffer::Framebuffer<'_>> for Framebuffer {
    fn from(value: limine::framebuffer::Framebuffer) -> Self {
        Self {
            address: VirtAddr::new(value.addr() as u64),
            width: value.width(),
            height: value.height(),
            pitch: value.pitch(),
            bpp: value.bpp(),
            background: 0x0000ff,
        }
    }
}

impl From<&limine::response::FramebufferResponse> for Framebuffer {
    fn from(value: &limine::response::FramebufferResponse) -> Self {
        match value.framebuffers().last() {
            Some(fb) => fb.into(),
            None => panic!("Ohno No Framebuffer"),
        }
    }
}

impl Write for Framebuffer {
    fn write_str(&mut self, s: &str) -> core::fmt::Result {
        self.draw_string(10, 10, s, 0xffffff);
        Ok(())
    }
}

static FBR: limine::request::FramebufferRequest = limine::request::FramebufferRequest::new();

#[macro_export]
macro_rules! print {
    ($($args:tt)*) => {
        $crate::graphics::framebuffer::_frame_print(format_args!($($args)*));
    };
}

#[macro_export]
macro_rules! println {
    () => {
        $crate::print!("\n")
    };
    ($($args:tt)*) => {
        $crate::print!("{}\n", format_args!($($args)*))
    };
}

#[doc(hidden)]
pub fn _frame_print(args: fmt::Arguments) {
    use core::fmt::Write;
    x86_64::instructions::interrupts::without_interrupts(|| {
        FRAME_WRITER.lock().write_fmt(args).unwrap()
    });
}
